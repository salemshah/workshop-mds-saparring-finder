name: CI/CD Pipeline for Sparring Finder

env:
  SERVER_DIR: "/root/sparring-finder-rest-full-api"

on:
  push:
    branches: [ main ]

jobs:
  build-and-test:
    name: Build and Test App
    runs-on: ubuntu-latest

    services:
      postgres-test-db:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?schema=public

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Wait for PostgreSQL Test DB
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready"
              break
            else
              echo "Waiting for PostgreSQL..."
              sleep 1
            fi
          done

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Apply Prisma Migrations
        run: npm run prisma:migrate:deploy

      - name: Validate Prisma Schema
        run: npx prisma validate

      - name: Check DB Connection
        run: npx prisma db pull
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run Linter
        run: npm run lint:ci

      - name: Run Commitlint
        run: npx commitlint --from=origin/main --to=HEAD

      - name: Run Unit/Integration Tests
        run: npm run test:ci
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
      # - name: Upload Test Coverage to Coveralls
      #   uses: coverallsapp/github-action@v2
      #   with:
      #     path-to-lcov: ./coverage/lcov.info
      #     github-token: ${{ secrets.GITHUB_TOKEN }}


  deploy:
    name: Deploy to Production
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code for Deployment
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: 🛠️ Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/sparring-finder-rest-full-api:latest

      - name: Start SSH Agent and Add Key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Upload Production .env File
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ env.SERVER_DIR }}"
          echo "${{ vars.ENV_PROD_FILE }}" | tr -d '\r' | ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cat > ${{ env.SERVER_DIR }}/.env"

      - name: Upload Docker Compose File
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ env.SERVER_DIR }}/docker-compose.prod.yml

      - name: Upload Nginx Configuration
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ env.SERVER_DIR }}/nginx/conf.d"
          scp -o StrictHostKeyChecking=no nginx/conf.d/default.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ env.SERVER_DIR }}/nginx/conf.d/default.conf

      - name: Enable and Reload Nginx Config
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          sudo mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled
          sudo cp ${{ env.SERVER_DIR }}/nginx/conf.d/default.conf /etc/nginx/sites-available/sparring-finder-app.duckdns.org
          sudo rm -f /etc/nginx/sites-enabled/sparring-finder-app.duckdns.org
          sudo ln -sf /etc/nginx/sites-available/sparring-finder-app.duckdns.org /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl reload nginx
          EOF

      - name: Deploy Latest Docker Image
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
          cd ${{ env.SERVER_DIR }}
          docker compose --env-file .env -f docker-compose.prod.yml down
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/sparring-finder-rest-full-api:latest
          docker compose --env-file .env -f docker-compose.prod.yml up -d
          docker image prune -f
          EOF
