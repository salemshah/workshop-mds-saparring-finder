name: Deploy PostgreSQL Backup & SSL Setup

env:
  BACKUP_DIR: "/root/minda-rest-full-api/postgres_backups"

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-backup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Start SSH Agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Create Backup Directory on VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ env.BACKUP_DIR }}"

      - name: Upload Backup Script
        run: |
          scp -o StrictHostKeyChecking=no scripts/backup_pg_dump.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ env.BACKUP_DIR }}/backup_pg_dump.sh

      - name: Set Execute Permissions on Backup Script
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "chmod +x ${{ env.BACKUP_DIR }}/backup_pg_dump.sh"

      - name: Install Dependencies on VPS
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          sudo apt-get update
          sudo apt-get install -y postgresql-client gzip cron curl certbot python3-certbot-nginx
          sudo systemctl enable cron
          sudo systemctl start cron
          EOF

      - name: Configure SSL with Certbot (If Needed)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          if [ ! -f /etc/letsencrypt/live/minda-app.store/fullchain.pem ]; then
            sudo certbot --nginx --agree-tos --email salemshahdev@gmail.com -d minda-app.store -d www.minda-app.store
          else
            echo "SSL Certificate already exists. Skipping issuance."
          fi
          EOF

      - name: Configure Cron Job for Scheduled Backups & SSL Renewal
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          (crontab -l 2>/dev/null | grep -v "backup_pg_dump.sh"; echo "0 2 * * * ${{ env.BACKUP_DIR }}/backup_pg_dump.sh >> ${{ env.BACKUP_DIR }}/backup.log 2>&1") | crontab -
          (crontab -l 2>/dev/null | grep -v "certbot renew"; echo "0 3 * * * certbot renew --quiet && systemctl reload nginx") | crontab -
          EOF

